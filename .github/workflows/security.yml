name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  gitleaks:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better detection
        
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only needed for commercial use
      with:
        config-path: .gitleaks.toml
        
    - name: Upload Gitleaks results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: results.sarif
        retention-days: 7

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run Go vulnerability check
      run: govulncheck ./...
      
    - name: Run Go security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out results.sarif ./...'
        
    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
      
    - name: Run staticcheck
      run: staticcheck ./...
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Check for hardcoded IPs and URLs
      run: |
        echo "üîç Checking for hardcoded IPs and suspicious URLs..."
        if grep -r --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.md" -E '([0-9]{1,3}\.){3}[0-9]{1,3}' . | grep -v 'localhost\|127.0.0.1\|0.0.0.0'; then
          echo "‚ùå Found hardcoded IP addresses"
          exit 1
        fi
        
        if grep -r --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.md" -E 'https?://[^/]*\.(com|org|net|io)' . | grep -v 'api\.\|developer\.\|docs\.\|github\.'; then
          echo "‚ùå Found suspicious hardcoded URLs"
          exit 1  
        fi
        echo "‚úÖ No hardcoded IPs or suspicious URLs found"